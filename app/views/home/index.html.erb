
    <!--- just new timeline styles -->
    <style type="text/css">

html,body { height: 100%; margin: 0px; padding: 0px; }

.flex-container {
  display: flex;
  height: 100%;
  flex-wrap: nowrap;
    justify-content: center;
}

.flex-container > div {
  width: 600px;
}

#timeline circle {
  r: 6px;
}

#timeline circle:hover { 
    stroke-width: 22px;
    -webkit-transition: stroke-width .2s; /* Safari */
    transition: stroke-width .2s;
}

.now{ 
  stroke: white;
  fill: white;
}

/*----------tooltips--------------*/

.tooltip {
    opacity:0;
    transition: opacity 0.2s;
}

g.tooltip rect {
    fill: lightpink;
}
circle:hover + g.tooltip.css {
  opacity:1;
}
svg {
    overflow:visible; 
    /*allow tooltips to spill into margins */
}

</style>
<!--- end just new timeline styles -->
<!-- gauge -->
    <script type="text/javascript" src="../assets/gauge.min.js"></script>

    <!-- css -->

      <style type="text/css">
#gauge1-txt, #gauge2-txt, #gauge3-txt {
  position: absolute;
  font-size: 2.6em;
  /* border: 1px solid green; */
  left: 50%;                         /*  safari  */
  top: 50%;                          /*  safari  */
  transform: translate(-50%,-50%);   /*  safari  */
}

.gauge_container{
  display: flex;
  height: 100px;
  width: 100px;
  margin-left: 5px;
  margin-right: 5px;
  justify-content: center;
  align-items: center;
  position: relative;                /*  safari  */
  /* border: 1px solid yellow; */
}

#gauge, #gauge_2, #gauge_3{
  display: flex;
  justify-content: center;
  position: absolute;
  left: 50%;                         /*  safari  */
  top: 50%;                          /*  safari  */
  transform: translate(-50%,-50%);   /*  safari  */
}

.gauge_level_label {
  width: 110px;
  /* border: 1px solid brown; */
  font-size: .6em;
  color: hsl( 0, 0%, 30%);
  padding-left: 5px;


}

      </style>

    <!-- javascript -->
    <script type="text/javascript">//<![CDATA[

    function gauge(score, id, text, color){
      var opts = {
        angle: 0.35, // The span of the gauge arc
        lineWidth: 0.1, // The line thickness
        radiusScale: 1, // Relative radius
        pointer: {
          length: 0.6, // // Relative to gauge radius
          strokeWidth: 0.035, // The thickness
          color: '#000000' // Fill color
        },
        limitMax: false,     // If false, max value increases automatically if value > maxValue
        limitMin: false,     // If true, the min value of the gauge will be fixed
        colorStart: '#F70FFF',   // Colors
        colorStop: color,    // just experiment with them
        strokeColor: '#EEEEEE',  // to see which ones work best for you
        generateGradient: true,
        highDpiSupport: true,     // High resolution support

      };
      var target = document.getElementById(id); // your canvas element
      var gauge = new Donut(target).setOptions(opts); // create sexy gauge!
      gauge.maxValue = 100; // set max gauge value
      gauge.setMinValue(0);  // Prefer setter over gauge.minValue = 0
      gauge.animationSpeed = 32; // set animation speed (32 is default value)
      gauge.set(score); // set actual value

    gauge.setTextField(document.getElementById(text));
    //gauge.set(20); // set actual value
    }//]]>

    </script>

    <!-- <div style= "width:100%; height:100%; display: flex;
  justify-content: center;
  align-items: center; border: 2px dotted green;">
    <canvas id="gauge" height="100" width="100" ></canvas>
    <span id="gauge1-txt"></span>
  </div> -->


<!-- gauge -->






<header class="w3-display-container w3-wide bgimg" id="home">

  <div class="w3-display-middle w3-text-black w3-center" >

<!---new timeline------------------------------------ -->

<div class = "flex-container">
  <div id="timeline">
    <svg height="100%" width="100%">  
    </svg>    
  </div>
</div>

<script>

console.log("minus; ")

console.log("tg: " + <%=@time_gaps%>)
var rcs= [0]

<% @time_gaps.each do |rc| %>
  rcs.push(<%=rc%>)
  <%end%>

endTime= <%=@today-@reality_checks_today[0].created_at%>;

console.log("rcs:  "+rcs);

timesOfRcs= []
// not totally necessary to have this as a hashmap.
<% @reality_checks_today.each do |rc| %>
timesOfRcs.push({date:"<%=rc.created_at.to_s[0..9]%>T<%=rc.created_at.to_s[11..18]%><%=%>"})
<%end%>

timesOfRcs.push({date:"<%=@today.to_s[0..9]%>T<%=@today.to_s[11..18]%><%=%>"})



centerY = document.getElementById('timeline').getElementsByTagName('svg')[0].getBoundingClientRect().height/2;
console.log(centerY);
var svg1= "<svg height=\"100%\" width=\"100%\">\r\n  <line x1=\"10%\" y1=\"50%\" x2=\"90%\" y2=\"50%\" style=\"stroke:hotpink ;stroke-width:2\" \/>\r\n"
var svg2="Sorry, your browser does not support inline SVG.\r\n<\/svg>"



var circles = "";
var segmentGroup;
var circleGroup;

function displayTimes(){
  var sumOfTimeBefore = 0;
      for (i=0; i<rcs.length; i++){

              pos = (((rcs[i]+sumOfTimeBefore )/endTime)*80 + 10);
              console.log(pos)


              if (i!=0) {
                segments(lastPos, pos, i);
              }

              var color = "hotpink";

              if (i!=0 && i!= rcs.length-1) {
               color = pickColor(i);
              }

              var circleSVG1="<circle cx=\""
              var circleSVG2="%\" cy=\"50%\" stroke=\""+color+"\"    fill=\""+ color+"\" \/>"

              var circleSVG1Now="<circle class=\"now\" cx=\""
              var circleSVG2Now = "%\" cy=\"50%\" \/>"

              if (i+1 != rcs.length){
                circleGroup += circleSVG1 + pos +circleSVG2;
              } else {
                circleGroup += circleSVG1Now + pos +circleSVG2Now;
              }

              addToolTips(pos, i);

              sumOfTimeBefore += rcs[i]; 
              lastPos = pos;
            } 
  
        function pickColor(i){
          var score = rcs[i];
        if (score >=4000) {
          color = "#004d00";
        } else if (score > 600 && score < 4000 ){
          color = "#008000";
        } else if (score <= 600) {
          color =  "#80ff80";
        }
          return color
        }
  
      function segments(start, end, i){
        var segment1 = "<line x1=\"";
        var segment2="%\" y1=\"50%\" x2=\"";
        var color = pickColor(i);
        var segment3="%\" y2=\"50%\" style=\"stroke:"+ color + ";stroke-width:4\" \/>";

        var segment = segment1 + start + segment2 +end + segment3; 
        segmentGroup+= segment;
      }

      function addToolTips(position, i){
        var toolTip1 = "<g class=\"tooltip css\" transform=\"translate("
        var toolTip2=","  +centerY+ ")\">\r\n        <rect x=\"-3em\" y=\"-48\" width=\"6em\" height=\"1.25em\" rx=\"1%\" ry=\"1%\"\/>\r\n          <text y=\"-48\" dy=\"1em\" text-anchor=\"middle\" fill=\"black\"> \r\n"
        var toolTip3="<\/text>\r\n  <\/g>";

        var svgWidth= document.getElementsByTagName('svg')[0].getBoundingClientRect().width; //make sure it's the right index if you have multiple svgs

        position = (position/100) * svgWidth;

        circleGroup += toolTip1+position+toolTip2 + moment(timesOfRcs[i].date).format('LT')+toolTip3;
      }
  
  circles += segmentGroup + circleGroup;
  //change from circles to segments and circles or something
  return circles;
}

  


var html = svg1 +displayTimes()+svg2;
document.getElementById('timeline').innerHTML = html;

console.log(html);






</script>


<!----new timeline end------------------------------- -->


    <p>Lucid mindset score:</p>

    <!-- gauge -->

        <div style= "width:100%; height:auto; margin-top: 10px;
        display: flex;
      justify-content: center;
      align-items: center;
      <!-- border: 3px solid purple; -->
      ">
<div style= "width:100%; height:auto; margin-top: 10px;
display: flex;
justify-content: center;
flex-direction: column;
align-items: center;
<!-- border: 1px solid orange; -->
">
        <div style= "width:auto; height:100px;
        display: flex;
      justify-content: space-between;
      align-items: center;
      <!-- border: 2px dotted green; -->

      ">

        <div class = "gauge_container"><canvas id="gauge" height="100" width="100"></canvas>
        <span id="gauge1-txt"></span></div>
        <!-- <div class = "gauge_container"><canvas id="gauge_2" height="100" width="100" ></canvas>
        <span id="gauge2-txt"></span></div>
        <div class = "gauge_container"><canvas id="gauge_3" height="100" width="100"  ></canvas>
        <span id="gauge3-txt"></span></div> -->

      </div>
      <div   style= "
      display: flex;
      height: auto;
      width: auto;
      margin-left: 5px;
      margin-right: 5px;
      justify-content: space-between;
      align-items: center;
      position: relative;
      <!-- border: 1px solid black; -->
      ">
<div class="gauge_level_label"><%=@level_text%></div>
<!-- <div class="gauge_level_label">moderate</div><div class="gauge_level_label">beginner</div> -->
    </div>

        <script>
        document.getElementById("gauge").innerHTML = window.gauge(<%=@level%>, "gauge", "gauge1-txt", "#cc33ff");
        // document.getElementById("gauge_2").innerHTML = window.gauge(<%=@score_2%>, "gauge_2", "gauge2-txt", "#cc33ff" );
        // document.getElementById("gauge_3").innerHTML = window.gauge(<%=@score_3%>, "gauge_3", "gauge3-txt", "#35B4DB");

        </script>
      </div>


    </div>
    <!-- gauge end -->


<!-- streak widget -->
<!-- ------------------------------------------------ -->
    <div id = "streak-widget" style=" height:80px; position: relative;" >

</div> 
<script> 
var badColor = "lavender";
var goodColor = "blue";
var numberOfStreak = <%=@streak%>; //sets streak here

function newCircle(position, isGood){
  var color;
  if (isGood == true){
    color = goodColor
  } else { color = badColor}
  
  return '<circle cx=\" '+ position +'%\" cy=\"50%\" r=\"20\" fill=\"' + color + '\" />'
}

function streak(number){

    var circles = "";
    
    if (number> 5){
      for (var i=0; i < 5; i++){
       circles += newCircle((((i+1)*10)+20), true);
    }
      
    } else {
    for (var i=0; i < number; i++){
       circles += newCircle((((i+1)*10)+20), true);
    }
    
            
    for (var i=(number); i < (5); i++){
       circles += newCircle((((i)*10)+(30)), false);
    }
    }
      
      return circles;
                 }



document.getElementById("streak-widget").innerHTML = '<svg height=\"100%\" width=\"100%\">\r\n  <line x1=\"30%\" y1=\"50%\" x2=\"70%\" y2=\"50%\" style=\"stroke:lavender;stroke-width:2\" />\r\n' + streak(numberOfStreak) + 'Sorry, your browser does not support inline SVG.\r\n</svg>';
</script>
<!-- streak widget end -->
<!-- --------------------------------------------------- -->

    
    <p>Yesterday's reality checks: <%= @yesterdays_reality_checks.count %><p>
      <h3>Last reality check: <u>
      <% if @time_since_last_check.utc.strftime("%H").to_i == 0 && @time_since_last_check.utc.strftime("%M").to_i == 0  %>
      <%= @time_since_last_check.utc.strftime("%S") %> second/s
      <% elsif @time_since_last_check.utc.strftime("%H").to_i == 0 && @time_since_last_check.utc.strftime("%M").to_i > 0  %>
      <%= @time_since_last_check.utc.strftime("%M") %> minute/s
      <% elsif @time_since_last_check.utc.strftime("%H").to_i > 0 %>
      <%= @time_since_last_check.utc.strftime("%H") %> hour/s
      <%end%>
     ago</u></h3>
    <h1 class="w3-jumbo"><%= @reality_checks_today.count %> RC's today!</h1>

    <h2><%= @today.strftime("%A, %B %d") %></h2>
<!--list of realuuty checks -->
    <button class=".btn" onclick="myFunction()"> Reveal All</button>

    <div id="collapsed_reality_checks">
      <table>
        <thead>
          <tr>
            <th colspan="3"></th>
          </tr>
        </thead>
        <tbody>
          <% @reality_checks_today.each do |reality_check| %>
            <tr>
              <% @number += 1%>
              <td><%= @number %>. <%=reality_check.created_at.strftime("%I:%M%P")%>

          </td> </tr>
          <% end %>
        </tbody>
      </table>

    </div>


<!--end list of realuuty checks -->
<%unless @reality_checks_today.count <= 1%>
<% g=@time_gaps.sort.last%>

<p>Longest time gap today: <%=Time.at(g).utc.strftime("%H:%M:%S")%></p>
<p>Next segment starts in: <%=@next_segment_start.utc.strftime("%M")%> minutes and <%=@next_segment_start.utc.strftime("%S")%> seconds</p>
<%end%>









  </div>
</header>
